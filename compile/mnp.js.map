{
"version":3,
"file":"compile/mnp.js",
"lineCount":6,
"mappings":"A,a;;;;;AAEA,MAAMA,EAAS,CACb,MAAS,EADI,CAEb,IAAO,EAFM,CAGb,MAAS,EAHI,CAIb,OAAU,EAJG,CAKb,KAAQ,EALK,CAMb,QAAW,EANE,CAOb,KAAQ,EAPK,CAQb,MAAS,EARI,CASb,KAAQ,EATK,C,CCCfC,MAAAC,QAAA,CAAiB,CACf,cCEaC,cAA2B,CAACC,CAAA,CAAS,EAAV,CAAc,CACtD,MAAM,CACJ,UAAAC,CAAA,CAAY,CAAA,CADR,CAEJ,KAAAC,CAAA,CAAO,EAFH,CAAA,CAGFF,CACJ,IAAKC,CAAL,CAEA,MFmBA,EEnBOC,CFmBP,CADMC,CACN,CADWP,CAAA,OACX,EACO,QAAQO,CAAR,IErBwCD,CFqBxC,SADP,CEpB+CA,CACxCA,CADPE,OAAAC,IAAA,CAAY,+BAAZ,CAA6C,CAA7C,CACOH,CAAAA,CAP+C,CDHvC;",
"sources":["node_modules/erte/src/index.js","src/depack.js","src/index.js"],
"sourcesContent":["import Diff from './diff'\n\nconst colors = {\n  'black': 30,\n  'red': 31,\n  'green': 32,\n  'yellow': 33,\n  'blue': 34,\n  'magenta': 35,\n  'cyan': 36,\n  'white': 37,\n  'grey': 90,\n}\n\nconst backgroundColors = {\n  'black': 40,\n  'red': 41,\n  'green': 42,\n  'yellow': 43,\n  'blue': 44,\n  'magenta': 45,\n  'cyan': 46,\n  'white': 47,\n}\n\n/**\n * Color the foreground.\n * @param {string} string The string to color.\n * @param {_erte.Color} color The color to apply.\n */\nexport function c(string, color) {\n  const cc = colors[color]\n  if (!cc) return string\n  return `\\x1b[${cc}m${string}\\x1b[0m`\n}\n\n/**\n * Color the background.\n * @param {string} string The string to color.\n * @param {_erte.Color} color The color to apply.\n */\nexport function b(string, color) {\n  const cc = backgroundColors[color]\n  if (!cc) return string\n  return `\\x1b[${cc}m${string}\\x1b[0m`\n}\n\n/**\n * Compares two strings and outputs a coloured version where strings don't match.\n * @param {string} source A string to compare.\n * @param {string} target Target string to compare with.\n * @returns {string} A string which uses shell-codes to highligh differences.\n */\nexport default function erte(source, target) {\n  const diff = new Diff()\n  const d = diff.diff(source, target)\n  const m = d.map(({ added, removed, value }) => {\n    let p\n    const s = value.split(' ')\n    if (added) {\n      p = s.map(t => {\n        return t.replace(/\\n$/mg, '\u23ce\\n')\n      }).map(t => c(t, 'green')).join(b(' ', 'green'))\n    } else if (removed) {\n      p = s.map(t => {\n        return t.replace(/\\n$/mg, '\u23ce\\n')\n      }).map(t => c(t, 'red')).join(b(' ', 'red'))\n    } else {\n      p = c(value, 'grey')\n    }\n    return p\n  })\n  const s = m.join('')\n  return s\n}\n\n/* documentary types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_erte.Color} Color The color to apply.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {('black'|'red'|'green'|'yellow'|'blue'|'magenta'|'cyan'|'white'|'grey')} _erte.Color The color to apply.\n */\n","import '../types/externs'\nimport myNewPackage from './'\n\nmodule.exports = {\n  '_myNewPackage': myNewPackage,\n}","import { c } from 'erte'\n\n/**\n * {{ description }}\n * @param {!_myNewPackage.Config} [config] Options for the program.\n */\nexport default async function myNewPackage(config = {}) {\n  const {\n    shouldRun = true,\n    text = '',\n  } = config\n  if (!shouldRun) return\n  console.log('my-new-package called with %s', c(text, 'yellow'))\n  return text\n}\n\n/**\n * @typedef {import('../types').Config} _myNewPackage.Config\n */\n"],
"names":["colors","module","exports","myNewPackage","config","shouldRun","text","cc","console","log"]
}
