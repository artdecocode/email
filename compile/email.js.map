{
"version":3,
"file":"compile/email.js",
"lineCount":16,
"mappings":"A;;;;;;wCACO,MAKLA,EAKEC,GALFD,iB,CCLK,MAoCLE,EASEC,GATFD,U,CCxBK,MAAME,EAAkB,CAACC,CAAD,CAAQC,CAAA,CAAO,CAAf,CAAkBC,CAAA,CAAU,CAAA,CAA5B,CAAAH,EAAsC,CACnE,GAAa,CAAb,GAAIE,CAAJ,EAAkB,CAACC,CAAnB,CACE,MAAOF,EAEHG,EAAAA,CAAaH,CAAAI,MAAA,CACV,IADU,CACJF,CAAA,CAAUD,CAAV,CAAiB,CAAjB,CAAqBI,IAAAA,EADjB,CAEnB,OAAIH,EAAJ,CAC2BC,CAnBdG,CAmBcH,CAnBRI,OAAND,CAAqB,CAArBA,CAkBb,CAI6BH,CAnBOK,MAAAC,CAmBKR,CAnBLQ,CAoB3BC,KAAA,CAAW,IAAX,CAX0D,CAA9D,CAsBMC,EAAgB,CAACX,CAAD,CAAQY,CAAA,CAAc,CAAA,CAAtB,CAAAD,EACNZ,CAAAc,CAAgBb,CAAhBa,CAAuB,CAAvBA,EAA4BD,CAAA,CAAc,CAAd,CAAkB,CAA9CC,EAvBhB,CA4CMC,EAA0BC,CAADD,EAAU,CAC9C,CAAM,CAAE,OAAQ,CAAE,OAAAE,CAAF,CAAV,CAAN,CAA+BD,CAA/B,CACA,OAAOC,EAFuC,C,CCxDzC,MAOLC,EAWEC,EAXFD,Q,CCNF,MAAME,EAAmB,yBAAzB,CACMC,EAAY,uGADlB,CAGMC,EAAUJ,CAAA,EAHhB,CAYMK,EAActB,CAADsB,EAAoB,CACrC,MAAM,CACJ,OAAAC,CAAA,CAAS,CAAA,CADL,CACY,eAAAC,CAAA,CAAiB,CAAC,SAAD,CAD7B,CAAA,CAES,EAFf,CAIMC,EAAK,IAAIC,MAAJ,CAAWN,CAAAO,OAAAC,QAAA,CAAyB,iBAAzB,CADZJ,CAAAd,KAAAmB,CAAoB,GAApBA,CACY,CAAX,CAEX,OAAO7B,EAAA4B,QAAA,CAAc,KAAd,CAAqB,GAArB,CAAAxB,MAAA,CACE,IADF,CAAA0B,OAAA,CAEGC,CAAA,EAAK,CACLC,CAAAA,CAAcD,CAAAE,MAAA,CAAQd,CAAR,CACpB,IAAoB,IAApB,GAAIa,CAAJ,EAA4B,CAACA,CAAA,CAAY,CAAZ,CAA7B,CACE,MAAO,CAAA,CAGHC,EAAAA,CAAQD,CAAA,CAAY,CAAZ,CAGd,OAAIC,EAAAC,SAAA,CAAe,uCAAf,CAAJ,EACED,CAAAC,SAAA,CAAe,0CAAf,CADF,CAES,CAAA,CAFT,CAKO,CAACT,CAAAU,KAAA,CAAQF,CAAR,CAdG,CAFR,CAAAH,OAAA,CAkBGC,CAAA;AAAKA,CAAAK,KAAA,EAlBR,CAAAC,IAAA,CAmBAN,CAAA,EACCR,CAAJ,CACSQ,CAAAH,QAAA,CAAUT,CAAV,CAA4B,CAACmB,CAAD,CAAIC,CAAJ,CAAA,EAAWD,CAAAV,QAAA,CAAUW,CAAV,CAAcA,CAAAX,QAAA,CAAWP,CAAX,CAAoB,GAApB,CAAd,CAAvC,CADT,CAIOU,CAxBJ,CAAArB,KAAA,CA0BC,IA1BD,CAP8B,C,CCHhC8B,QAASA,EAAY,CAACC,CAAD,CAAcC,CAAd,CAA0BC,CAAA,CAAS,CAAA,CAAnC,CAA0C,CA8BpE,MAxBAC,SAAW,CAACC,CAAD,CAAiB,CAC1B,IAAM7B,EAASF,CAAA,CAAuBgC,SAAvB,CAAf,CACM,CAAE,MAAOC,CAAT,CAAA,CAA4BC,KAAJ,EAC9B,OAAMC,EH0BgBlD,CAAAkD,CG1BqBF,CH0BrBE,CAAuB,CAAvBA,CAA0B,CAAA,CAA1BA,CG1BtB,CAEMC,EAAU,CADVC,CACU,CADAN,CACA,WAD0BG,MAC1B,EAAUH,CAAAK,QAAV,CAAmCL,CAI7CO,EAAAA,CAAe,CHwBiBC,UG1BDH,CH0BCG,EGxBjB,CAEnB,GAHgC,IAG5B,GAHiBrC,CAGjB,EAHoCyB,CAGpC,GAHoDzB,CAGpD,EAAkB2B,CAAlB,CAA2B,CAACD,CAAD,CAA3B,CAA0C,CAC5CO,CAD4C,CAE5CP,CAF4C,CAF3B,CAAAhC,KAAA,CAMd,IANc,CAQfV,EAAAA,CDgBKsB,CChBG,CAAW8B,CAAX,CAId,OAA6BE,OAAAC,OAAA,CAFnBJ,CAAAK,CAAUX,CAAVW,CAA+BR,KAAJ,EAER,CAHVS,CAAEP,QAAAA,CAAFO,CAAWzD,MAAAA,CAAXyD,CAGU,CArBH,CANwC,C,CCFvDC,QAASA,EAAM,CAAC9C,CAAD,CAAc,CAC1C,IAAM,CAAE,MAAAZ,CAAF,CAAA,CAAgBgD,KAAJ,EAClB,OAAMhC,EAASF,CAAA,CAAuBgC,SAAvB,CACTJ,EAAAA,CAAa/B,CAAA,CAAcX,CAAd,CAAqBY,CAArB,CAEnB,OAAO4B,EAAA,CAAaxB,CAAb,CAAqB0B,CAArB,CAAiC9B,CAAjC,CALmC,C,CCP5C+C,QAASA,EAAkB,CAACpD,CAAD,CAASqD,CAAT,CAAY,CACrC,GAAIA,CAAJ,CAAQrD,CAAR,CAAiB,CAAjB,CACE,KAAUyC,MAAJ,CAAU,+CAAV,CAAN,CAFmC,CAaxBa,cAAeA,EAAW,CAACC,CAAD,CAAK/C,CAAL,CAAWgD,CAAX,CAAyB,CAChE,MAAMC,EAAKN,CAAA,CAAO,CAAA,CAAP,CACX,IAAkB,UAAlB,GAAI,MAAOI,EAAX,CACE,KAAUd,MAAJ,CAAU,0BAAV,CAAN,CAEF,MAAgBiB,EAAaH,CAAbG,OAChB,IAAI,CAACA,CAAL,CACE,KAAUjB,MAAJ,CAAU,yCAAV,CAAN,CAyBF,MAtBYkB,OAAM,IAAIC,OAAJ,CAAY,CAACC,CAAD,CAAUC,CAAV,CAAA,EAAoB,CAChD,MAAMzB,EAAK,CAAC0B,CAAD,CAAMJ,CAAN,CAAAtB,EACL0B,CAAJ,EACQC,CACC,CADOP,CAAA,CAAGM,CAAH,CACP,CAAAD,CAAA,CAAOE,CAAP,CAFT,EAIOH,CAAA,CAAQL,CAAR,EAAwBG,CAAxB,CAGT,KAAIM,EAAU,CAAC5B,CAAD,CAEV6B,MAAAC,QAAA,CAAc3D,CAAd,CAAJ,EACEA,CAAA4D,QAAA,CAAa,CAACC,CAAD,CAAMhB,CAAN,CAAA,EAAY,CACvBD,CAAA,CAAmBM,CAAnB,CAA6BL,CAA7B,CADuB,CAAzB,CAGA,CAAAY,CAAA,CAAW,CAAC,GAAGzD,CAAJ,CAAU6B,CAAV,CAJb,EAK0C,CAL1C,CAKW6B,KAAAxE,KAAA,CAAW6C,SAAX,CAAAvC,OALX,GAMEoD,CAAA,CAAmBM,CAAnB,CAA6B,CAA7B,CACA,CAAAO,CAAA,CAAU,CAACzD,CAAD,CAAO6B,CAAP,CAPZ,CASAkB,EAAA,CAAG,GAAGU,CAAN,CApBgD,CAAhC,CAV8C,C,CCX3DK,QAASA,EAAO,CAACC,CAAD,CAAQ,CAE7B,OADMxC,CACN,CADU,oBAAAyC,KAAA,CAA0BD,CAA1B,CACV,GAAYxC,CAAA,CAAE,CAAF,CAFiB,CAUxB0C,QAASA,GAAe,CAACC,CAAD,CAAa,CAO1C,MANeA,EAAAC,OAAAC,CAAkB,CAACC,CAAD,CAAMC,CAAN,CAAA,EAAkB,CACjD,MAAMC,EAAOT,CAAA,CAAQQ,CAAR,CACbD,EAAA,CAAIE,CAAJ,CAAA,CAAYF,CAAA,CAAIE,CAAJ,CAAZ,EAAyB,EACzBF,EAAA,CAAIE,CAAJ,CAAAC,KAAA,CAAeF,CAAf,CACA,OAAOD,EAJ0C,CAApCD,CAKZ,EALYA,CAD2B;AAerCK,cAAeA,GAAS,CAACC,CAAD,CAAS,CACtCC,CADsC,CAC7B,SAAAC,CAD6B,CACnB,SAAAC,CADmB,CACTC,CADS,CACD,EAAAC,CADC,CAAT,CAE5B,CACD,GAAe,EAAf,EAAIJ,CAAJ,CAAmB,CAejBK,IAAeA,EAAfA,cAAyB,CAACnC,CAAD,CAAI,CAC3B,MAAM0B,EAAOU,CAAA,CAAKpC,CAAL,CACb,IAAI,CAAC0B,CAAL,CACE,KAAUtC,MAAJ,CAAU,mCAAV,CAAN,CAEF,GAAI,CACF,MAAO,OAAM,IAAImB,OAAJ,CAAY,CAAC8B,CAAD,CAAIpE,CAAJ,CAAA,EAAU,CACjC,GAAI,CACF,MAAMqE,EAAOvG,CAAA,CAAiBiG,CAAjB,CAA2BN,CAAAa,SAA3B,CAA0C,EAAA,EAAM,CAC3DN,CAAAO,MAAA,CAAa,yBAAb,CAAwCd,CAAAa,SAAxC,CACAF,EAAA,CAAEC,CAAF,CAF2D,CAAhD,CADX,CAKF,MAAO5B,CAAP,CAAY,CACZzC,CAAA,CAAEyC,CAAF,CADY,CANmB,CAAtB,CADX,CAWF,MAAOA,CAAP,CAAY,CACZ,MAAO,OAAMyB,CAAA,CAAW,EAAEnC,CAAb,CADD,CAhBa,CAd7B,KAAIoC,CACAL,EAAJ,CACEK,CADF,CACS,CAAC,CAAEG,SAAUR,CAAZ,CAAD,CADT,EAGEK,CAEA,CAF6C,MAAMnC,CAAA,CAAYhE,CAAZ,CAAuB4F,CAAvB,CAEnD,CADAO,CAAAK,KAAA,CAAU,CAACC,CAAD,CAAIC,CAAJ,CAAA,EAAUD,CAAAE,SAAV,CAAuBD,CAAAC,SAAjC,CACA,CAAAX,CAAAO,MAAA,CAAa,eAAb,CAA8BJ,CAA9B,CALF,CAOA,IAAI,CAACA,CAAL,EAAa,CAACA,CAAAzF,OAAd,CACE,KAAUyC,MAAJ,CAAU,yBAAyByC,CAAzB,GAAV,CAAN,CA0BF,MAAO,OAAMM,CAAA,CAAW,CAAX,CApCI,CAsCnB,MAAMG;AAAOvG,CAAA,CAAiB+F,CAAjB,CAA0BI,CAA1B,CAEb,OAAO,OAAM,IAAI3B,OAAJ,CAAY,CAAC8B,CAAD,CAAIpE,CAAJ,CAAA,EAAU,CACjCqE,CAAAO,GAAA,CAAQ,OAAR,CAAkBnC,CAAD,EAAS,CACxBzC,CAAA,CAAMmB,KAAJ,CAAU,wCAAV,CAAoD8C,CAApD,CAA6D,GAA7D,CAAmEJ,CAAnE,CAA6E,KAA7E,CAAqFpB,CAArF,CAAF,CADwB,CAA1B,CAIA4B,EAAAO,GAAA,CAAQ,SAAR,CAAmB,EAAA,EAAO,CACxBZ,CAAAO,MAAA,CAAa,uCAAb,CAAsDN,CAAtD,CAA+D,GAA/D,CAAqEJ,CAArE,CACAQ,EAAAQ,mBAAA,CAAwB,OAAxB,CACAT,EAAA,CAAEC,CAAF,CAHwB,CAA1B,CALiC,CAAtB,CAzCZ,CA0DIS,QAASA,EAAU,CAACC,CAAD,CAAU,CAClC,MAAOA,EAAAhF,QAAA,CAAgB,MAAhB,CAAwB,EAAxB,CAAAA,QAAA,CAAoC,OAApC,CAA6C,EAA7C,CAAAQ,KAAA,EAD2B,CAQ7ByE,QAASA,EAAY,CAACC,CAAD,CAAY,CACjCrC,KAAAC,QAAA,CAAcoC,CAAd,CAAL,GACEA,CADF,CACcA,CAAA1G,MAAA,CAAgB,GAAhB,CADd,CAIA,OADgB0G,EAAAzE,IAAA0E,CAAcJ,CAAdI,CAJsB,C,CChGjC,MAkBLC,GAmBEC,OAnBFD,WAlBK,CAoBLE,GAiBED,OAjBFC,WApBK,CAiCLC,EAIEF,OAJFE,Y,CCtBAC,IAAAA,GAAcA,CAACA,MAADA,CAASA,IAATA,CAAeA,SAAfA,CAA0BA,MAA1BA,CAAdA,CAEEC,GAAKC,SAFPF,CAGEG,GAAcD,OASlBE,SAASA,GAAa,CAACjB,CAAD,CAAIkB,CAAJ,CAAgB,CACpC,MAAMC,EAAOR,EAAA,CAnBAX,YAmBA,CACbmB,EAAAC,OAAA,CAAYpB,CAAZ,CACA,OAAOmB,EAAAA,KAAA,CAAUD,CAAV,CAtBKlB,QAsBL,CAH6B,CAkBtCqB,QAASA,GAAY,CAACC,CAAD,CAAgB,CAC7BC,CAAAA,CAAUD,CAAAzH,MAAA,CAAoB,MAApB,CAAAiC,IAAA,CACT0F,CAAA,EAAK,CAER,MAAM,CAACC,CAAD,CAAOC,CAAP,CAAA,CAAgBF,CAAA3H,MAAA,CAAQ,IAAR,CACtB,OAAO,CAAE4H,KAAAA,CAAF,CAAQC,MAAAA,CAAR,CAHC,CADI,CAAAnG,OAAA,CAMN,CAAC,CAAE,KAAAkG,CAAF,CAAD,CAAA,EACCE,EAAAhG,SAAA,CAA6B8F,CAAAG,YAAA,EAA7B,CAPK,CAqBhB,OAXeC,CACbN,QAAAA,CADaM,CAEbC,EAAQP,CAAAzF,IAAA,CACD,CAAC,CAAE,KAAA2F,CAAF,CAAD,CAAA,EAAcA,CAAAG,YAAA,EADb,CAAAzH,KAAA,CAEA,GAFA,CAFK0H,CAKbE,EACER,CAAAzF,IAAA,CACO,CAAC,CAAE,KAAA2F,CAAF,CAAQ,MAAAC,CAAR,CAAD,CAAA,EAAqB,GAAGD,CAAAG,YAAA,EAAH,IAAyBF,CAAzB,EAD5B,CAAAvH,KAAA,CAEQ,IAFR,CADF4H,CAGkB,MARLF,CAXoB;AAoCrCG,QAASA,GAAe,CAACT,CAAD,CAAUU,CAAV,CAAgBC,CAAhB,CAA0B,CAC1CL,CAAAA,CAASR,EAAA,CAAaE,CAAb,CAEf,OAAMY,EAAS,CACb,KADa,CAEb,cAFa,CAGb,mBAHa,CAIb,WAJa,CAKb,KAAKF,CAAA/C,OAAL,EALa,CAMb,KAAK+C,CAAAG,YAAL,EANa,CAOb,KAAKP,CAAAC,EAAL,EAPa,CAQb,KAAKO,IAAAC,IAAA,EAAL,EARa,CASb,KAAKD,IAAAC,IAAA,EAAL,CAAkB,MAAlB,EATa,CAUb,KAAKT,CAAAN,QAAAzF,IAAA,CAAmB,CAAC,CAAE,KAAA2F,CAAF,CAAQ,MAAAC,CAAR,CAAD,CAAA,EAAqB,GAAGD,CAAH,IAAWC,CAAX,EAAxC,CAAAvH,KAAA,CAAiE,GAAjE,CAAL,EAVa,CAWb,MAAM+H,CAAN,EAXa,CAYb,IAZa,CAiBTK,EAAAA,CAAYtB,EAAA,CAFIuB,OAAOX,CAAAE,EAAPS,GAEJ,CAA6BP,CAAAf,WAA7B,CAElBiB,EAAAnD,KAAA,CAAY,KAAKuD,CAAL,EAAZ,CAEA,KAAIE,EAAS,kBAAb,CACIC,EAAQ,CACZP,EAAA/D,QAAA,CAAe,CAACoD,CAAD,CAAInE,CAAJ,CAAA,EAAU,CACV,CAAb,EAAIqF,CAAJ,EACED,CACA,EADU,GAAGjB,CAAH,QAAYnE,CAAA,CAAI8E,CAAAnI,OAAJ,CAAoB,IAApB,CAA2B,EAAvC,EACV,CAAA0I,CAAA,CAAQ,CAFV,GAIED,CACA,EADU,GAAGjB,CAAH,IACV,CAAAkB,CAAA,EALF,CADuB,CAAzB,CASA,OAAOD,EAnCyC,C,CCxElDE,QAASA,GAAiB,CAAC5D,CAAA,CAAO,cAAR,CAAwB,CAChD,MAAO,IAAI6B,CAAA,CAAY,EAAZ,CAAAgC,SAAA,CACC,KADD,CAAJ,IACeP,IAAAC,IAAA,EADf,IAC6BvD,CAD7B,GADyC;AAenC8D,QAASA,GAAO,CAC7BnJ,CAD6B,CAE7BoJ,CAF6B,CAG7BC,CAH6B,CAI7BC,CAJ6B,CAK7BC,CAL6B,CAM7BhB,CAAA,CAAO,CACLf,WAAY,IADP,CAELkB,YAAa,IAFR,CAGLlD,OAAQ,IAHH,CANsB,CAW7B,CACE,QAASsC,CAAA,CAAI,CACX,YAAa,gBADF,CADf,CAIE,KAAAzC,CAJF,CAAA,CAKI,EAhByB,CAiB7B,CAIA,IAAImE,EA5BG,OAAOtC,CAAA,CAAY,EAAZ,CAAAgC,SAAA,CAAyB,KAAzB,CAAP,EA6BP,KAAIO,EAAW,EAEf,KAAMC,EAAc,CAAC,CAACJ,CAChBzB,EAAAA,CAAU,CACd,QAAWwB,CADG,CAEd,KAAQrJ,CAFM,CAGd,GAAMoJ,CAHQ,CAId,KAAQO,CAAA,IAAIhB,IAAJgB,aAAA,EAJM,CAKd,eAAgB,KALF,CAMd,aAAcV,EAAA,CAAkB5D,CAAlB,CANA,CAOd,GAAIqE,CAAA,CAAc,CAAE,eAAgB,mCAAmCF,CAAnC,EAAlB,CAAd,CAAkF,EAPxE,CAQd,GAAG1B,CARW,CAUhB,KAAK,IAAM8B,CAAX,GAAkB/B,EAAlB,CACE4B,CAAA,EAAY,GAAGG,CAAH,KAAW/B,CAAA,CAAQ+B,CAAR,CAAX,GAbFC,MAaE,EAEVC,EAAAA,CAAO,EAEPJ,EAAJ,EACQ3D,CAkBN,CAlBa,EAkBb,CAjBIuD,CAiBJ,EAXEvD,CAAAT,KAAA,CALayE,CAEX,2FAFWA,CAGXT,CAHWS,CAKHtJ,KAAA,CAzBFoJ,MAyBE,CAAV,CAWF;AATIN,CASJ,GARQS,CAIN,CAJa,CACX,6CADW,CAEXT,CAAA5H,QAAA,CAAa,KAAb,CA9BMkI,MA8BN,CAFW,CAIb,CAAA9D,CAAAT,KAAA,CAAU0E,CAAAvJ,KAAA,CAhCFoJ,MAgCE,CAAV,CAIF,EADAC,CACA,CAFAA,CAEA,CAFQ,KAAKN,CAAL,GAlCEK,MAkCF,EAER,CADQ9D,CAAAtF,KAAA,CAAU,GAnCRoJ,MAmCQ,KAAWL,CAAX,GAnCRK,MAmCQ,EAAV,CACR,CAAAC,CAAA,EAAQ,GApCED,MAoCF,GApCEA,MAoCF,KAAiBL,CAAjB,IAnBV,EAoBWD,CApBX,GAqBEO,CArBF,EAqBUP,CAAA5H,QAAA,CAAa,KAAb,CAtCEkI,MAsCF,CArBV,CA0BItB,EAAA/C,OAAJ,EAAmB+C,CAAAG,YAAnB,EAAuCH,CAAAf,WAAvC,GAKIiC,CAKF,CALEA,CAKF,CDkCwB9G,CClCxB,CAHEmH,CDvBGnI,QAAA,CAAasI,EAAb,CAA+B,GAA/B,CAAAtI,QAAAgB,CAA4CuH,EAA5CvH,CAAuE,EAAvEA,CC0BL,CD/DIwH,CC+DJ,CD/DWpD,EAAA,CAxBAqD,QAwBA,CC+DX,CD9DFD,CAAAzC,OAAA,CAAY0C,CAAZ,CC8DE,CD7DF,CC6DE,CD7DKD,CAAAE,OAAA,CA3BKD,KA2BL,CC6DL,CDoCF,CCpCE,CDoCK9B,EAAA,CAAgBT,CAAhB,CCxCHU,CDwCG,CAFUC,CAEV,CCpCL,CAAAiB,CAAA,EANkBZ,CAJpB,CAgBA,OAHAY,EAGA,CA3DYI,MA2DZ,CAFYC,CA/DZ,C,CCrCK,MAULQ,GAQEC,GARFD,Q,CCCKE,cAAgBA,GAAU,CAAChF,CAAD,CAASH,CAAT,CAAerF,CAAf,CAAqBgF,CAArB,CAAiC8E,CAAjC,CAAuC,CACtE,EAAAlE,CADsE,CAC9D,mBAAA6E,CAD8D,CAC1C,EAAAC,CAD0C,CAChC,EAAA7E,CADgC,CACvB,EAAAJ,CADuB,CACd,SAAAC,CADc,CACJ,SAAAC,CADI,CAEtE,KAAAgF,CAFsE,CAEhE,KAAAC,CAFgE,CAAvC,CAG9B,CACD,IAAI3E,EAAO,MAAMV,EAAA,CAAUC,CAAV,CAAkB,CACjCI,EAAAA,CADiC,CACzBC,EAAAA,CADyB,CAChBJ,EAAAA,CADgB,CACPC,SAAAA,CADO,CACGC,SAAAA,CADH,CAAlB,CAIjB,OAAMkF,EAAKC,CAADD,EAAO,CACfjF,CAAAO,MAAA,CAAa,cAAb,CAA6BX,CAA7B,CAAqCsF,CAArC,CACA7E,EAAA8E,MAAA,CAAWD,CAAX,CAnBSE,MAmBT,CAFe,CAKjB/E,EAAAgF,YAAA,CAAiB,MAAjB,CAVC,KAYGlF,EAAO,EAZV,CAYcmF,EAAO,CAZrB,CAYwBC,EAAY,CAZpC,CAYuCC,EAAM,EAC9C,OAAMC,EAAQ,CACZ,GAAKV,CAAD,EAASC,CAAT,CAAiB,CAAC,YAAD,CAAjB,CAAkC,EAD1B,CAEZ,cAAc5K,CAAd,GAFY,CAGZ,GAAGgF,CAAA5C,IAAA,CAAgBkJ,CAAD,EAAU,YAAYA,CAAZ,GAAzB,CAHS,CAIZ,MAJY,CAKZ,MALY,CAMZ,EANY,CAAd,CAQMC,GAAQZ,CAAA,EAAQC,CAAR,CAAe,CAC3B1B,CAAA,IAAIsC,MAAJ,CAAWb,CAAX,CAAAzB,UAAA,CAA0B,QAA1B,CAD2B,CAE3BA,CAAA,IAAIsC,MAAJ,CAAWZ,CAAX,CAAA1B,UAAA,CAA0B,QAA1B,CAF2B,CAAf,CAGV,EAEJ,KAAIuC,CAAJ,CACIC,EAAW,CAAA,CADf,CAGIC,CACJ,IAAI,CACF,MAAO,OAAM,IAAIzH,OAAJ,CAAY,CAAC8B,CAAD,CAAIpE,CAAJ,CAAA,EAAU,CA8BjCgK,QAASA,GAAQ,CAACC,CAAD;AAAO5I,CAAP,CAAgB,CAC/B,OAAQ4I,CAAR,EACA,KAAK,GAAL,CAEE,GAAgB,aAAhB,EAAIH,CAAJ,CAA+B,CAC7BzF,CAAAQ,mBAAA,CAAwB,MAAxB,CAEAkF,EAAA,CAAW1F,CACX0F,EAAAG,MAAA,EAEA7F,EAAA,CAAOqE,EAAA,CAAQ,CACbyB,OAAQ9F,CADK,CAEbwE,mBAAAA,CAFa,CAAR,CAGJ,EAAA,EAAM,CACPxE,CAAAO,GAAA,CAAQ,MAAR,CAAgBwF,CAAhB,CAEA/F,EAAAQ,mBAAA,CAAwB,OAAxB,CACAR,EAAAQ,mBAAA,CAAwB,KAAxB,CAJO,CAHF,CAUPR,EAAAO,GAAA,CAAQ,OAAR,CAAkBnC,EAAD,EAAS,CACxBuB,CAAAtB,MAAA,CAAa,0BAAb,CAAyCD,EAAzC,CADwB,CAA1B,CAIAsH,EAAAM,OAAA,EACAP,EAAA,CAAW,CAAA,CACXb,EAAA,CAAE,QAAQxF,CAAR,EAAF,CACA,MAvB6B,CA0B3B,YAAAnD,KAAA,CAAkBe,CAAlB,CAAJ,EAAkCyH,CAAlC,CAEEe,CAFF,CAEQ,MAFR,EAIEC,CACA,CADW,CAAA,CACX,CAAAD,CAAA,CAAM,MALR,CAOAZ,EAAA,CAAE,GAAGY,CAAH,IAAUpG,CAAV,EAAF,CACA,MACF,MAAK,GAAL,CACEW,CAAA,CAAE/C,CAAF,CACA,MACF,MAAK,GAAL,CACA,KAAK,GAAL,CACE,GAAI,CAACyI,CAAL,CAAe,CACV,eAAAxJ,KAAA,CAAqBe,CAArB,CAAH,EACE4H,CAAA,CAAE,UAAF,CACA,CAAAa,CAAA,CAAW,aAFb,EAIEA,CAJF,CAIa,CAAA,CAEb,MAPa,CAUjB,KAAK,GAAL,CACMR,CAAJ,EAAYG,CAAA/K,OAAZ;AAA2B,CAA3B,GACEsF,CAAAsG,KAAA,CAAY,WAAZ,CAAyBL,CAAzB,CAA+B5I,CAA/B,CACA,CAAA+C,CAAA,CAAE/C,CAAF,CAFF,CAKA4H,EAAA,CADgBQ,CAAAc,CAAMjB,CAANiB,CAChB,CACAjB,EAAA,EACA,MAEF,MAAK,GAAL,CACEL,CAAA,CAAEf,CAAF,CACAe,EAAA,CAAE,EAAF,CACAA,EAAA,CAAE,GAAF,CACA,MAEF,MAAK,GAAL,CAGEA,CAAA,CADqBU,EAAAa,CAAMjB,CAANiB,CACrB,CACAjB,EAAA,EACA,MAEF,SACc,GAAZ,EAAIU,CAAJ,GACEjG,CAAAyG,KAAA,CAAY,6BAAZ,CAA2CR,CAA3C,CACA,CAAAjK,CAAA,CAAMmB,KAAJ,CAAU,cAAc8I,CAAd,SAA2B5I,CAA3B,EAAV,CAAF,CAFF,CA7EF,CAD+B,CA7BjC,MAAM+I,EAAUM,CAADN,EAAW,CACxBjG,CAAA,EAAQuG,CACFC,EAAAA,CAAQxG,CAAA5F,MAAA,CA9CT6K,MA8CS,CACduB,EAAA7H,QAAA,CAAe8H,CAAD,EAAU,CACtB5G,CAAAO,MAAA,CAAa,cAAb,CAA6BX,CAA7B,CAAqCgH,CAArC,CAEApB,EAAA,EAAQoB,CAAR,CAlDGxB,MAoDY,IAAf,EAAIwB,CAAA,CAAK,CAAL,CAAJ,GAIEZ,EAAA,CADaa,QAAAZ,CAASW,CAAAE,OAAA,CAAY,CAAZ,CAAe,CAAf,CAATb,CAA4B,EAA5BA,CACb,CAAeT,CAAf,CACA,CAAAA,CAAA,CAAM,EALR,CALsB,CAAxB,CAaArF,EAAA,CAAOwG,CAAA,CAAMA,CAAAjM,OAAN,CAAqB,CAArB,CAhBiB,CAkB1B2F,EAAAO,GAAA,CAAQ,MAAR,CAAgBwF,CAAhB,CAEA/F,EAAAO,GAAA,CAAQ,OAAR,CAAkBnC,CAAD,EAAS,CACxBuB,CAAAtB,MAAA,CAAa,oBAAb,CAAmCkB,CAAnC,CACA5D,EAAA,CAAEyC,CAAF,CAFwB,CAA1B,CArBiC,CAAtB,CADX,CAAJ,OAoHU,CACR4B,CAAAQ,mBAAA,CAAwB,MAAxB,CACA,CAAAR,CAAA0G,IAAA,EAFQ,CAlJT,C,CCVHC,QAASA,EAAM,EAAG,E,CCFlBC,MAAAC,QAAA,CAAiB,CACf,ODMFC,cAAqB,CAACC,CAAD,CAAO,CAAE,KAAA1D,CAAF,CAAQ,KAAAC,CAAR,CAAP,CAAuB0D,CAAA,CAAU,EAAjC,CAAqC,CACxD,MAAM,CACJ,OAAAC,CAAA,CAAS,CAAA,CADL,CAEJ,EAAAtH,CAAA,CAASsH,CAAA,CAAS,CAChB/G,MAAOyG,CADS,CAEhBV,KAAMU,CAFU,CAGhBP,KAAMO,CAHU,CAIhBtI,MAAOsI,CAJS,CAAT,CAKL,CACFzG,MAAOgH,OAAAC,IADL,CAEFlB,KAAMiB,OAAAjB,KAFJ,CAGFG,KAAMc,OAAAd,KAHJ,CAIF/H,MAAO6I,OAAA7I,MAJL,CAPA,CAaJ,KAAM,CACJ,WAAAkD,CADI,CAEJ,YAAAkB,CAAA,CAAc,MAFV,CAAA,CAG0B,EAhB5B,CAiBJ,EAAAjD,CAAA,CAAU,EAjBN,CAkBJ,EAAAI,CAAA,CAAU,WAlBN,CAmBJ,SAAAF,CAAA,CAAW,EAnBP,CAoBJ,SAAAD,CAAA,CAAW,EApBP,CAqBJ,mBAAA+E,CArBI,CAsBJ,EAAAC,CAtBI,CAuBJ,KAAAC,CAvBI,CAuBE,KAAAC,CAvBF,CAAA,CAwBFqC,CAEEjI,EAAAA,CAAa,EAEfgI,EAAA5D,GAAJ,EAAapE,CAAAM,KAAA,CAAgB,GAAGsB,CAAA,CAAaoG,CAAA5D,GAAb,CAAnB,CACT4D,EAAAK,GAAJ,EAAarI,CAAAM,KAAA,CAAgB,GAAGsB,CAAA,CAAaoG,CAAAK,GAAb,CAAnB,CACTL,EAAAM,IAAJ,EAActI,CAAAM,KAAA,CAAgB,GAAGsB,CAAA,CAAaoG,CAAAM,IAAb,CAAnB,CAERpI,EAAAA,CAASH,EAAA,CAAgBC,CAAhB,CAEf,OAAMhF,EAAO0G,CAAA,CAAWsG,CAAAhN,KAAX,CAAb,CACMqF,EAAOT,CAAA,CAAQ5E,CAAR,CAEP8J,EAAAA,CAAOX,EAAA,CAAQ6D,CAAAhN,KAAR,CAAmBgN,CAAA5D,GAAnB,CAA4B4D,CAAA3D,QAA5B,CAA0CC,CAA1C,CAAgDC,CAAhD,CAAsD,CACjE/D,OAAQH,CADyD,CAEjEqD,YAAAA,CAFiE;AAGjElB,WAAAA,CAHiE,CAAtD,CAIV,CACDnC,KAAAA,CADC,CAJU,CAQPyB,EAAAA,CAAU,EAChB,KAAK,IAAItB,CAAT,GAAmBN,EAAnB,CAA2B,CACnBkE,CAAAA,CAAKlE,CAAA,CAAOM,CAAP,CACX,IAAI,CACF,MAAMvB,EAAM,MAAMuG,EAAA,CAAWhF,CAAX,CAAmBH,CAAnB,CAAyBrF,CAAzB,CAA+BoJ,CAA/B,CAAmCU,CAAnC,CAAyC,CACzDlE,EAAAA,CADyD,CAEzD6E,mBAAAA,CAFyD,CAErCC,EAAAA,CAFqC,CAGzD7E,EAAAA,CAHyD,CAGhDJ,EAAAA,CAHgD,CAGvCC,SAAAA,CAHuC,CAG7BC,SAAAA,CAH6B,CAIzDgF,KAAAA,CAJyD,CAInDC,KAAAA,CAJmD,CAAzC,CAMlB9D,EAAA,CAAQtB,CAAR,CAAA,CAAkBvB,CAPhB,CAQF,MAAOI,CAAP,CAAY,CACZyC,CAAA,CAAQtB,CAAR,CAAA,CAAkBnB,CADN,CAVW,CAc3B,MAAOyC,EA7DiD,CCPzC;",
"sources":["node_modules/net/index.js","node_modules/dns/index.js","node_modules/erotic/src/lib.js","node_modules/os/index.js","node_modules/@artdeco/clean-stack/src/index.js","node_modules/erotic/src/callback.js","node_modules/erotic/src/index.js","node_modules/makepromise/src/index.js","src/lib.js","node_modules/crypto/index.js","src/dkim.js","src/composer.js","node_modules/tls/index.js","src/client.js","src/index.js","src/depack.js"],
"sourcesContent":["export default net\nexport const {\n  Server,\n  Socket,\n  Stream,\n  connect,\n  createConnection,\n  createServer,\n  isIP,\n  isIPv4,\n  isIPv6,\n} = net","export default dns\nexport const {\n  ADDRCONFIG,\n  ADDRGETNETWORKPARAMS,\n  BADFAMILY,\n  BADFLAGS,\n  BADHINTS,\n  BADNAME,\n  BADQUERY,\n  BADRESP,\n  BADSTR,\n  CANCELLED,\n  CONNREFUSED,\n  DESTRUCTION,\n  EOF,\n  FILE,\n  FORMERR,\n  LOADIPHLPAPI,\n  NODATA,\n  NOMEM,\n  NONAME,\n  NOTFOUND,\n  NOTIMP,\n  NOTINITIALIZED,\n  REFUSED,\n  Resolver,\n  SERVFAIL,\n  TIMEOUT,\n  V4MAPPED,\n  getServers,\n  lookup,\n  lookupService,\n  resolve,\n  resolve4,\n  resolve6,\n  resolveAny,\n  resolveCname,\n  resolveMx,\n  resolveNaptr,\n  resolveNs,\n  resolvePtr,\n  resolveSoa,\n  resolveSrv,\n  resolveTxt,\n  reverse,\n  setServers,\n} = dns","const getLastItem = (array) => {\n  const item = array[array.length - 1]\n  return item\n}\nconst getItemsFrom = (array, from) => array.slice(from)\n\n/**\n * Get a segment of the stack string, defaults are from = 0 and oneLine = false.\n * @param {string} stack the stack string\n * @param {number} [from=0] index from which to slice from\n * @param {boolean} [oneLine=false] Whether just first line must be returned\n * @returns {string} A stack segment starting from the specified line.\n */\nexport const getStackSegment = (stack, from = 0, oneLine = false) => {\n  if (from === 0 && !oneLine) {\n    return stack\n  }\n  const splitStack = stack\n    .split('\\n', oneLine ? from + 1 : undefined)\n  if (oneLine) {\n    const line = getLastItem(splitStack)\n    return line\n  } else {\n    const items = getItemsFrom(splitStack, from)\n    return items.join('\\n')\n  }\n}\n\n/**\n * Get the stack trace part of when the erotic function was called. Disregards\n * first two lines.\n * @param {string} stack error's stack\n * @param {boolean} [transparent] trim the top line as well\n * @returns {string} A part of stack\n */\nexport const getEntryStack = (stack, transparent = false) => {\n  const stackSegment = getStackSegment(stack, 2 + (transparent ? 1 : 0))\n  return stackSegment\n}\n\n/**\n * Get stack line of where the callback was called.\n * @param {string} stack Stack string.\n * @returns {string} Stack line.\n */\nexport const getCalleeStackLine = (stack) => {\n  const calleeStackLine = getStackSegment(stack, 2, true)\n  return calleeStackLine\n}\n\nexport const getStackHeading = message => `Error: ${message}`\n\n/**\n * Extract caller from the function's `arguments`.\n * @param {Object} args arguments\n * @returns {!Function} The caller function from `arguments.callee.caller`.\n */\nexport const getCallerFromArguments = (args) => {\n  const { callee: { caller } } = args\n  return caller\n}","export default os\nexport const {\n  EOL,\n  arch,\n  constants,\n  cpus,\n  endianness,\n  freemem,\n  homedir,\n  hostname,\n  loadavg,\n  networkInterfaces,\n  platform,\n  release,\n  tmpdir,\n  totalmem,\n  type,\n  uptime,\n  userInfo,\n} = os","import { homedir } from 'os'\n\nconst extractPathRegex = /\\s+at.*(?:\\(|\\s)(.*)\\)?/\nconst pathRegex = /^(?:(?:(?:node|(?:internal\\/[\\w/]*|.*node_modules\\/(?:IGNORED_MODULES)\\/.*)?\\w+)\\.js:\\d+:\\d+)|native)/\n\nconst homeDir = homedir()\n\n/**\n * Remove internal Node.JS lines from the error stack traces.\n * @param {string} stack The error stack to update.\n * @param {!_cleanStack.Config} [options] Options for the program.\n * @param {boolean} [options.pretty=false] Replace the absolute path to the home directory with the `~`. Default `false`.\n * @param {!Array<string>} [options.ignoredModules=\"\uff3b'pirates'\uff3d\"] Which modules to ignore in the path. Default `\uff3b'pirates'\uff3d`.\n */\nconst cleanStack = (stack, options) => {\n  const {\n    pretty = false, ignoredModules = ['pirates'],\n  } = options || {}\n  const j = ignoredModules.join('|')\n  const re = new RegExp(pathRegex.source.replace('IGNORED_MODULES', j))\n\n  return stack.replace(/\\\\/g, '/')\n    .split('\\n')\n    .filter(x => {\n      const pathMatches = x.match(extractPathRegex)\n      if (pathMatches === null || !pathMatches[1]) {\n        return true\n      }\n\n      const match = pathMatches[1]\n\n      // Electron\n      if (match.includes('.app/Contents/Resources/electron.asar') ||\n        match.includes('.app/Contents/Resources/default_app.asar')) {\n        return false\n      }\n\n      return !re.test(match)\n    })\n    .filter(x => x.trim())\n    .map(x => {\n      if (pretty) {\n        return x.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, '~')))\n      }\n\n      return x\n    })\n    .join('\\n')\n}\n\nexport default cleanStack\n\n/* documentary types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_cleanStack.Config} Config Options for the program.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _cleanStack.Config Options for the program.\n * @prop {boolean} [pretty=false] Replace the absolute path to the home directory with the `~`. Default `false`.\n * @prop {!Array<string>} [ignoredModules=\"\uff3b'pirates'\uff3d\"] Which modules to ignore in the path. Default `\uff3b'pirates'\uff3d`.\n */\n","import cleanStack from '@artdeco/clean-stack'\nimport {\n  getCallerFromArguments, getCalleeStackLine, getStackHeading,\n} from './lib'\n\n/**\n * Create a callback.\n * @param {!Function} entryCaller The function which was called at entry.\n * @param {string} entryStack The first line of the error stack to be returned\n * @param {boolean} [shadow=false] Print only entry stack.\n */\nexport function makeCallback(entryCaller, entryStack, shadow = false) {\n  /**\n   * This callback should be called when an asynchronous error occurred.\n   * @param {(string|Error)} messageOrError A message string or an _Error_ object at the point of actual error.\n   * @returns {Error} An error with the updated stack which includes the callee.\n   */\n  function cb(messageOrError) {\n    const caller = getCallerFromArguments(arguments)\n    const { stack: errorStack } = new Error()\n    const calleeStackLine = getCalleeStackLine(errorStack)\n    const isError = messageOrError instanceof Error\n    const message = isError ? messageOrError.message : messageOrError\n\n    const stackHeading = getStackHeading(message)\n    const entryHasCallee = caller !== null && entryCaller === caller\n    const stackMessage = [\n      stackHeading,\n      ...(entryHasCallee || shadow ? [entryStack] : [\n        calleeStackLine,\n        entryStack,\n      ]),\n    ].join('\\n')\n\n    const stack = cleanStack(stackMessage)\n    const properties = { message, stack }\n    const e = isError ? messageOrError : new Error()\n\n    return /** @type {Error} */ (Object.assign(/** @type {!Object} */ (e), properties))\n  }\n\n  return cb\n}","import {\n  getEntryStack, getCallerFromArguments,\n} from './lib'\nimport { makeCallback } from './callback'\n\n/**\n * Returns a function to create an error with a stack trace starting at the line in code when the call was made by the callee.\n * @param {boolean} [transparent] Pretend as if the call to the function lead to the error, without exposing any of the internal stack.\n */\nexport default function erotic(transparent) {\n  const { stack } = new Error()\n  const caller = getCallerFromArguments(arguments)\n  const entryStack = getEntryStack(stack, transparent)\n\n  return makeCallback(caller, entryStack, transparent)\n}","import erotic from 'erotic'\n\nfunction checkArgumentIndex(length, i) {\n  if (i > length - 2) {\n    throw new Error('Function does not accept that many arguments.')\n  }\n}\n\n/**\n * Get a promise from a function which otherwise accepts a callback.\n * @param {Function} fn A function to promisify.\n * @param {*|Array<*>} [args] An array of arguments to use in the call, or a single argument.\n * @param {*} [resolveValue] A value to override the value with which the promise will be resolved.\n * @returns {Promise<*>} A promise resolved on callback invocation without an error and rejected on callback called with an error.\n */\nexport default async function makePromise(fn, args, resolveValue) {\n  const er = erotic(true)\n  if (typeof fn !== 'function') {\n    throw new Error('Function must be passed.')\n  }\n  const { length: fnLength } = fn\n  if (!fnLength) {\n    throw new Error('Function does not accept any arguments.')\n  }\n\n  const res = await new Promise((resolve, reject)=> {\n    const cb = (err, res) => {\n      if (err) {\n        const error = er(err)\n        return reject(error)\n      }\n      return resolve(resolveValue || res)\n    }\n\n    let allArgs = [cb]\n\n    if (Array.isArray(args)) {\n      args.forEach((arg, i) => {\n        checkArgumentIndex(fnLength, i)\n      })\n      allArgs =  [...args, cb]\n    } else if (Array.from(arguments).length > 1) { // args passed as a single argument, not array\n      checkArgumentIndex(fnLength, 0)\n      allArgs = [args, cb]\n    }\n    fn(...allArgs)\n  })\n  return res\n}","import { createConnection } from 'net'\nimport { resolveMx } from 'dns'\nimport makePromise from 'makepromise'\n\nexport function getHost(email) {\n  const m = /[^@]+@([\\w\\d\\-.]+)/.exec(email)\n  return m && m[1]\n}\n\n/**\n * Groups by domain.\n * @param {!Array<string>} recipients\n * @return {Object<string, !Array<string>>}\n */\nexport function groupRecipients(recipients) {\n  const groups = recipients.reduce((acc, current) => {\n    const host = getHost(current)\n    acc[host] = acc[host] || []\n    acc[host].push(current)\n    return acc\n  }, {})\n  return groups\n}\n\n/**\n * Connect to domain by Mx record\n * @param {string} domain The domain to connect to.\n * @return {!Promise<!net.Socket>} Connected socket.\n */\nexport async function connectMx(domain, {\n  devPort, smtpHost, smtpPort, logger, devHost,\n}) {\n  if (devPort == -1) { // not in development mode -> search the MX\n    let data\n    if (smtpHost) {\n      data = [{ exchange: smtpHost }]\n    } else {\n      data = /** @type {!Array<!dns.MxRecord>} */ (await makePromise(resolveMx, domain))\n      data.sort((a, b) => a.priority - b.priority)\n      logger.debug('mx resolved: ', data)\n    }\n    if (!data || !data.length)\n      throw new Error(`Cannot resolve Mx of <${domain}>`)\n\n    // if (smtpHost != -1) data.push({ exchange: smtpHost })\n\n    // eslint-disable-next-line no-inner-declarations\n    async function tryConnect(i) {\n      const host = data[i]\n      if (!host)\n        throw new Error('Cannot connect to any SMTP server')\n\n      try {\n        return await new Promise((r, j) => {\n          try {\n            const sock = createConnection(smtpPort, host.exchange, () => {\n              logger.debug('MX connection created: ', host.exchange)\n              r(sock)\n            })\n          } catch (err) {\n            j(err)\n          }\n        })\n      } catch (err) {\n        return await tryConnect(++i)\n      }\n    }\n\n    return await tryConnect(0)\n  } // development mode -> connect to the specified devPort on devHost\n  const sock = createConnection(devPort, devHost)\n\n  return await new Promise((r, j) => {\n    sock.on('error', (err) => {\n      j(new Error('Error on connectMx (development) for \"'+ devHost +':' + devPort + '\": ' + err))\n    })\n\n    sock.on('connect', () =>  {\n      logger.debug('MX (development) connection created: '+ devHost +':' + devPort)\n      sock.removeAllListeners('error')\n      r(sock)\n    })\n  })\n}\n\n/**\n * Returns normalised email address.\n * @param {string} address\n */\nexport function getAddress(address) {\n  return address.replace(/^.+</, '').replace(/>\\s*$/, '').trim()\n}\n\n/**\n * Get email addresses.\n * @param {string|!Array<string>} addresses\n */\nexport function getAddresses(addresses) {\n  if (!Array.isArray(addresses)) {\n    addresses = addresses.split(',')\n  }\n  const results = addresses.map(getAddress)\n  return results\n}\n\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('dns').MxRecord} dns.MxRecord\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('net').Socket} net.Socket\n */","export default _crypto\nexport const {\n  Certificate,\n  Cipher,\n  Credentials,\n  DEFAULT_ENCODING,\n  Decipher,\n  DiffieHellman,\n  ECDH,\n  Hash,\n  Hmac,\n  Verify,\n  createCipher,\n  createCipheriv,\n  createCredentials,\n  createDecipher,\n  createDecipheriv,\n  createDiffieHellman,\n  createECDH,\n  createHash,\n  createHmac,\n  createSign,\n  createVerify,\n  getCiphers,\n  getCurves,\n  getDiffieHellman,\n  getHashes,\n  pbkdf2,\n  pbkdf2Sync,\n  privateDecrypt,\n  privateEncrypt,\n  pseudoRandomBytes,\n  publicDecrypt,\n  publicEncrypt,\n  randomBytes,\n  randomFill,\n  randomFillSync,\n  timingSafeEqual,\n} = _crypto","import { createSign, createHash } from 'crypto'\n\n// == The config\nconst config = {\n  b: {\n    encoding: 'base64',\n    algorithm: 'RSA-SHA256',\n  },\n  bh: {\n    encoding: 'hex',\n    algorithm: 'SHA256',\n  },\n  validHeaders: ['from', 'to', 'subject', 'date'],\n  regex: {\n    wsp: /\\s{1,}/g,\n    wspAtLineEnd: /\\s+$/g,\n  },\n}\n// == The methods\n/**\n * Generates the signature.\n * @param {string} b\n * @param {string} privateKey\n */\nfunction hashSignature(b, privateKey) {\n  const sign = createSign(config.b.algorithm)\n  sign.update(b)\n  return sign.sign(privateKey, config.b.encoding)\n}\n/**\n * Hashes the body.\n * @param {string} bh\n */\nfunction hashBody(bh) {\n  const hash = createHash(config.bh.algorithm)\n  hash.update(bh)\n  return hash.digest(config.bh.encoding)\n}\n/**\n * Parses the headers to a usable format\n * @param {string} headersString The headers\n */\nfunction headerParser(headersString) {\n  const headers = headersString.split('\\r\\n')\n    .map(h => {\n      // = Splits the header at the :<SP>\n      const [name, value] = h.split(': ')\n      return { name, value }\n    })\n    .filter(({ name }) => {\n      return config.validHeaders.includes(name.toLowerCase())\n    })\n  // == Adds the dkim required info\n  const parsed = {\n    headers,\n    fields: headers\n      .map(({ name }) => name.toLowerCase())\n      .join(':'),\n    fieldValues:\n      headers\n        .map(({ name, value }) => `${name.toLowerCase()}:${value}`)\n        .join('\\n') + '\\r\\n',\n  }\n  // == Returns the parsed\n  return parsed\n}\n/**\n * Body preparation.\n * @param {string} body\n */\nfunction canonicalizeBody(body) {\n  return body.replace(config.regex.wsp, ' ').replace(config.regex.wspAtLineEnd, '')\n}\n/**\n * Builds the DKIM header\n * @param {string} headers\n * @param {_email.Dkim} dkim\n */\nfunction buildDkimHeader(headers, dkim, bodyHash) {\n  const parsed = headerParser(headers)\n\n  const header = [\n    `v=1`,\n    `a=rsa-sha256`,\n    `c=relaxed/relaxed`,\n    `q=dns/txt`,\n    `d=${dkim.domain}`,\n    `s=${dkim.keySelector}`,\n    `h=${parsed.fields}`,\n    `t=${Date.now()}`,\n    `x=${Date.now() + 999999}`,\n    `z=${parsed.headers.map(({ name, value }) => `${name}:${value}`).join('|')}`,\n    `bh=${bodyHash}`,\n    `b=`,\n  ]\n  // == Prepares the header for hash\n  const headerForSign = `dkim${parsed.fieldValues}}`\n  // == Hashes the header\n  const signature = hashSignature(headerForSign, dkim.privateKey)\n  // == Appends the signature to the header\n  header.push(`b=${signature}`)\n  // == Makes the header readable\n  let result = 'DKIM-Signature: '\n  let count = 0\n  header.forEach((h, i) => {\n    if (count >= 2) {\n      result += `${h};\\r\\n${i < header.length ? '\\t' : ''}`\n      count = 0\n    } else {\n      result += `${h}; `\n      count++\n    }\n  })\n  return result\n}\n\n/*\n * @license\n * ISC License (ISC). Copyright 2020 https://www.npmjs.com/~skywa04885\n * https://www.npmjs.com/package/fannst-nodemailer\n */\n\n/**\n * Generates a signature.\n * @param {string} headers The headers string\n * @param {!_email.Dkim} dkim\n * @param {string} body\n */\nexport default function generate(headers, dkim, body) {\n  // == Prepares the body\n  const cb = canonicalizeBody(body)\n  const bodyHash = hashBody(cb)\n  // == Builds the header\n  return buildDkimHeader(headers, dkim, bodyHash)\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('..').Dkim} _email.Dkim\n */","import generate from './dkim'\nimport { randomBytes } from 'crypto'\n\n/**\n * Creates a message id\n */\nfunction generateMessageId(host = 'unknown.host') {\n  return `<${randomBytes(24)\n    .toString('hex')}_${Date.now()}@${host}>`\n}\n/**\n * Creates the boundary\n */\nfunction generateBoundary() {\n  return `----${randomBytes(16).toString('hex')}`\n}\n/**\n * Composes the message with headers.\n * @param {string} from\n * @param {string} to\n */\nexport default function compose(\n  from,\n  to,\n  subject,\n  html,\n  text,\n  dkim = {\n    privateKey: null,\n    keySelector: null,\n    domain: null,\n  },\n  {\n    headers: h = {\n      'X-Service': '@artdeco/email',\n    },\n    host,\n  } = {}\n) {\n  /**\n   * Creates the default data boundary etc\n   */\n  let boundary = generateBoundary()\n  let document = ''\n  const spr = '\\r\\n'\n  const alternative = !!html\n  const headers = {\n    'Subject': subject,\n    'From': from,\n    'To': to,\n    'Date': new Date().toUTCString(),\n    'MIME-Version': '1.0',\n    'Message-ID': generateMessageId(host),\n    ...(alternative ? { 'Content-Type': `multipart/alternative; boundary=${boundary}` } : {}),\n    ...h,\n  }\n  for (const key in headers) {\n    document += `${key}: ${headers[key]}${spr}`\n  }\n  let body = ''\n\n  if (alternative) {\n    const data = []\n    if (html) {\n      const HTML = [\n        `Content-Type: text/html; charset=utf-8`,\n        `Content-Transfer-Encoding: quoted-printable${spr}`,\n        html,\n      ]\n      data.push(HTML.join(spr))\n    }\n    if (text) {\n      const TEXT = [\n        `Content-Type: text/plain; charset=utf-8${spr}`,\n        text.replace(/\\n/g, spr),\n      ]\n      data.push(TEXT.join(spr))\n    }\n    body += `--${boundary}${spr}`\n    body += data.join(`${spr}--${boundary}${spr}`)\n    body += `${spr}${spr}--${boundary}--`\n  } else if (text) {\n    body += text.replace(/\\n/g, spr)\n  }\n  /**\n   * Checks if it should DKIM Sign the emmail\n   */\n  if (dkim.domain && dkim.keySelector && dkim.privateKey) {\n    /**\n     * Signs the email\n     */\n    const signature = generate(\n      document,\n      dkim,\n      body,\n    )\n    // = Appends the signature\n    document += signature\n  }\n  // = Adds the body\n  document += spr\n  document += body\n\n  return document\n}","export default tls\nexport const {\n  CLIENT_RENEG_LIMIT,\n  CLIENT_RENEG_WINDOW,\n  DEFAULT_CIPHERS,\n  DEFAULT_ECDH_CURVE,\n  SLAB_BUFFER_SIZE,\n  SecureContext,\n  Server,\n  TLSSocket,\n  checkServerIdentity,\n  connect,\n  convertALPNProtocols,\n  convertNPNProtocols,\n  createSecureContext,\n  createSecurePair,\n  createServer,\n  getCiphers,\n  parseCertString,\n} = tls","import { connect } from 'tls'\nimport { connectMx } from './lib'\n\nconst CRLF = '\\r\\n'\n\n/**\n * @param {string} domain\n * @param {string} host\n * @param {string} from\n * @param {!Array<string>} recipients Email addresses of those who should get the email.\n * @param {string} body The message to send.\n */\nexport async  function sendToSMTP(domain, host, from, recipients, body, {\n  logger, rejectUnauthorized, autoEHLO, devHost, devPort, smtpHost, smtpPort,\n  user, pass,\n}) {\n  let sock = await connectMx(domain, {\n    logger, devHost, devPort, smtpHost, smtpPort,\n  })\n\n  const w = (s) => {\n    logger.debug('send %s > %s', domain, s)\n    sock.write(s + CRLF)\n  }\n\n  sock.setEncoding('utf8')\n\n  let data = '', step = 0, loginStep = 0, msg = ''\n  const queue = [\n    ...((user && pass) ? ['AUTH LOGIN'] : []),\n    `MAIL FROM:<${from}>`,\n    ...recipients.map((rcpt) => `RCPT TO:<${rcpt}>`),\n    'DATA',\n    'QUIT',\n    '',\n  ]\n  const login = user && pass ? [\n    new Buffer(user).toString('base64'),\n    new Buffer(pass).toString('base64'),\n  ] : []\n\n  let cmd\n  let upgraded = false\n\n  let original\n  try {\n    return await new Promise((r, j) => {\n      const onData = (chunk) => {\n        data += chunk\n        const parts = data.split(CRLF)\n        parts.forEach((line) => {\n          logger.debug('recv %s > %s', domain, line)\n\n          msg += (line + CRLF)\n\n          if (line[3] == ' ') {\n            // 250-information dash is not complete.\n            // 250 OK. space is complete.\n            const code = parseInt(line.substr(0, 3), 10)\n            response(code, msg)\n            msg = ''\n          }\n        })\n        data = parts[parts.length - 1]\n      }\n      sock.on('data', onData)\n\n      sock.on('error', (err) => {\n        logger.error('Fail to connect %s', domain)\n        j(err)\n      })\n\n      /**\n       * @param {number} code\n       * @param {string} message\n       */\n      function response(code, message) {\n        switch (code) {\n        case 220:\n          //   220   on server ready\n          if (upgraded == 'in-progress') {\n            sock.removeAllListeners('data')\n\n            original = sock\n            original.pause()\n\n            sock = connect({\n              socket: sock,\n              rejectUnauthorized,\n            }, () => {\n              sock.on('data', onData)\n\n              sock.removeAllListeners('close')\n              sock.removeAllListeners('end')\n            })\n\n            sock.on('error', (err) => {\n              logger.error('Error on connectMx for: ', err)\n            })\n\n            original.resume()\n            upgraded = true\n            w(`EHLO ${host}`)\n            break\n          }\n\n          if (/\\besmtp\\b/i.test(message) || autoEHLO) {\n            // TODO:  determin AUTH type; auth login, auth crm-md5, auth plain\n            cmd = 'EHLO'\n          } else {\n            upgraded = true\n            cmd = 'HELO'\n          }\n          w(`${cmd} ${host}`)\n          break\n        case 221: // bye\n          r(message)\n          break\n        case 235: // verify ok\n        case 250: // operation OK\n          if (!upgraded) {\n            if(/\\bSTARTTLS\\b/i.test(message)){\n              w('STARTTLS')\n              upgraded = 'in-progress'\n            } else {\n              upgraded = true\n            }\n            break\n          }\n        // eslint-disable-next-line no-fallthrough\n        case 251: { // foward\n          if (step == queue.length - 1) {\n            logger.info('OK: %s %s', code, message)\n            r(message)\n          }\n          const command = queue[step]\n          w(command)\n          step++\n          break\n        }\n        case 354: // start input end with . (dot)\n          w(body)\n          w('')\n          w('.')\n          break\n\n        case 334: {\n          // input login\n          const loginCommand = login[loginStep]\n          w(loginCommand)\n          loginStep++\n          break\n        }\n        default:\n          if (code >= 400) {\n            logger.warn('SMTP responds error code %s', code)\n            j(new Error(`SMTP code: ${code} msg: ${message}`))\n          }\n        }\n      }\n    })\n  } finally {\n    sock.removeAllListeners('data')\n    sock.end()\n  }\n}\n","import { getHost, groupRecipients, getAddresses, getAddress } from './lib'\nimport compose from './composer'\nimport { sendToSMTP } from './client'\n\n\nfunction dummy () {}\n\n/**\n * @type {_email.email}\n */\nasync function $email(mail, { html, text }, options = {}) {\n  const {\n    silent = false,\n    logger = silent ? {\n      debug: dummy,\n      info: dummy,\n      warn: dummy,\n      error: dummy,\n    } : {\n      debug: console.log,\n      info: console.info,\n      warn: console.warn,\n      error: console.error,\n    },\n    dkim: {\n      privateKey,\n      keySelector = 'dkim',\n    } = /** @type {_email.Dkim} */ ({}),\n    devPort = -1,\n    devHost = 'localhost',\n    smtpPort = 25,\n    smtpHost = -1,\n    rejectUnauthorized,\n    autoEHLO,\n    user, pass,\n  } = options\n\n  const recipients = []\n\n  if (mail.to) recipients.push(...getAddresses(mail.to))\n  if (mail.cc) recipients.push(...getAddresses(mail.cc))\n  if (mail.bcc) recipients.push(...getAddresses(mail.bcc))\n\n  const groups = groupRecipients(recipients)\n\n  const from = getAddress(mail.from)\n  const host = getHost(from)\n\n  const body = compose(mail.from, mail.to, mail.subject, html, text, {\n    domain: host,\n    keySelector,\n    privateKey,\n  }, {\n    host,\n  })\n\n  const results = {}\n  for (let domain in groups) {\n    const to = groups[domain]\n    try {\n      const res = await sendToSMTP(domain, host, from, to, body, {\n        logger,\n        rejectUnauthorized, autoEHLO,\n        devHost, devPort, smtpHost, smtpPort,\n        user, pass,\n      })\n      results[domain] = res\n    } catch (err) {\n      results[domain] = err\n    }\n  }\n  return results\n}\n// * @param mail {object}\n// *             subject\n// *             type         default 'text/plain', 'text/html'\n// *             charset      default 'utf-8'\n// *             encoding     default 'base64'\n// *             id           default timestamp+from\n// *             headers      object\n// *             content\n// *             attachments\n// *               [{\n// *                 type\n// *                 filename\n// *                 content\n// *               }].\n// *\n// * @param callback function(err, domain).\n// *\n\nexport default $email\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('..')} _email.email\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('..').Dkim} _email.Dkim\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('..').Mail} _email.Mail\n */","import '../types/externs'\nimport email from './'\n\nmodule.exports = {\n  '_email': email,\n}"],
"names":["createConnection","net","resolveMx","dns","getStackSegment","stack","from","oneLine","splitStack","split","undefined","item","length","slice","items","join","getEntryStack","transparent","stackSegment","getCallerFromArguments","args","caller","homedir","os","extractPathRegex","pathRegex","homeDir","cleanStack","pretty","ignoredModules","re","RegExp","source","replace","j","filter","x","pathMatches","match","includes","test","trim","map","m","p1","makeCallback","entryCaller","entryStack","shadow","cb","messageOrError","arguments","errorStack","Error","calleeStackLine","message","isError","stackMessage","stackHeading","Object","assign","e","properties","erotic","checkArgumentIndex","i","makePromise","fn","resolveValue","er","fnLength","res","Promise","resolve","reject","err","error","allArgs","Array","isArray","forEach","arg","getHost","email","exec","groupRecipients","recipients","reduce","groups","acc","current","host","push","connectMx","domain","devPort","smtpHost","smtpPort","logger","devHost","tryConnect","data","r","sock","exchange","debug","sort","a","b","priority","on","removeAllListeners","getAddress","address","getAddresses","addresses","results","createHash","_crypto","createSign","randomBytes","validHeaders","wsp","regex","wspAtLineEnd","hashSignature","privateKey","sign","update","headerParser","headersString","headers","h","name","value","config$$module$src$dkim.validHeaders.includes","toLowerCase","parsed","fields","fieldValues","buildDkimHeader","dkim","bodyHash","header","keySelector","Date","now","signature","headerForSign","result","count","generateMessageId","toString","compose","to","subject","html","text","boundary","document","alternative","toUTCString","key","spr","body","HTML","TEXT","config$$module$src$dkim.regex.wsp","config$$module$src$dkim.regex.wspAtLineEnd","hash","bh","digest","connect","tls","sendToSMTP","rejectUnauthorized","autoEHLO","user","pass","w","s","write","CRLF","setEncoding","step","loginStep","msg","queue","rcpt","login","Buffer","cmd","upgraded","original","response","code","pause","socket","onData","resume","info","command","loginCommand","warn","chunk","parts","line","parseInt","substr","end","dummy","module","exports","$email","mail","options","silent","console","log","cc","bcc"]
}
